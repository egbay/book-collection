name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    name: Setup Node.js Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Lint
        run: npm run lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [setup, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Run Tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/testdb
        run: |
          npx prisma db push --force-reset
          npm run test

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [setup, lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [setup, lint, test, build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t your-dockerhub-username/book-collection:latest .
          docker push your-dockerhub-username/book-collection:latest

      - name: Deploy to server
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            docker pull your-dockerhub-username/book-collection:latest
            docker stop book-collection || true
            docker rm book-collection || true
            docker run -d --name book-collection -p 3000:3000 your-dockerhub-username/book-collection:latest
